#### Warnings
import warnings
warnings.filterwarnings("ignore")



#### Filling missing values with the mean of each column
df['Price'].fillna(df['Price'].mean())



#### Filling Categorical Missing values with "Unknown"
cols = ['Company', 'Ram', 'storage']
for col in cols:
	df[col].fillna("Unknown")



#### Outlier detection
Q1 = df['Price'].quantile(0.25)
Q3 = df['Price'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
df[(df['Price'] > upper_bound) | (df['Price'] < lower_bound)]



#### Removing Outlier
df[~((df['Price'] > upper_bound) | (df['Price'] < lower_bound))]




#### Replace outliers with mean, median, or mode
df.loc[df['Salary'] > upper_bound, 'Salary'] = df['Salary'].median()
df




#### LabelEncoder
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
le.fit_transform(df['Ram'])


### One-hot Encoding
df = pd.get_dummies(df, columns=['Company', 'Ram', 'storage'])  # example categorical columns





##### Groupby analysis
summary_stats = df.groupby("Age Group")[["Income (INR)"]].agg(["mean", "median", "min", "max" ,"std"])
summary_stats



##### Mapping
age_group_mapping = {"18-25": 1, "26-35": 2, "36-45": 3, "46-60": 4}
df["Age Group Numeric"] = df["Age Group"].map(age_group_mapping)
df.head()



#### train_test_split
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)






#### Linear Regression, Logistic Regression

from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.naive_bayes import GaussianNB

model.LinearRegression()

model.fit(x_test, y_test)

model.predict(y_test)

data = pd.DataFrame({"y_test" : y_test , "y_pred" : y_pred})



# Error Metrics (Regression)

from sklearn.metrics import mean_squared_error, r2_score

mse = mean_squared_error(y_test, y_pred)
print(mse)
print("rmse" , np.sqrt(mse))
print("r2_score", r2_score(y_test, y_pred))





#### Error Metrics (Classification)

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score

# Compute confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)

# Extract TP, FP, TN, FN
TN, FP, FN, TP = cm.ravel()

# Compute performance metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
error_rate = 1 - accuracy

# Display results
print(f"True Positives (TP): {TP}")
print(f"False Positives (FP): {FP}")
print(f"True Negatives (TN): {TN}")
print(f"False Negatives (FN): {FN}")
print(f"Accuracy: {accuracy:.2f}")
print(f"Error Rate: {error_rate:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")












